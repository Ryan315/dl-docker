ARG UBUNTU_VERSION=22.04
FROM ubuntu:${UBUNTU_VERSION}}

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update --fix-missing && apt-get install -y apt-utils software-properties-common
RUN add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main"

# ------------------------------------------------------------------------------------------
RUN apt-get install -y \
        wget git zsh vim curl \
        build-essential cmake unzip pkg-config \
        ca-certificates \
        openssh-server \
        locales \
        # opencv-python-headless && \
        libcanberra-gtk-module libcanberra-gtk3-module && \
    rm -rf /var/lib/apt/lists/*

RUN wget https://bootstrap.pypa.io/get-pip.py && python3 get-pip.py
ARG PIP=pip3

RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
    dpkg-reconfigure --frontend=noninteractive locales && \
    update-locale LANG=en_US.UTF-8

ENV LANG en_US.UTF-8
ENV PROJECT_DIR $HOME/code

##--------------------------------------------------------------------------------
##--- Create a non-root user
# ARG username=ryan90
# ARG uid=1000
# ARG gid=100
# ENV USER $username
# ENV UID $uid
# ENV GID $gid
# ENV HOME /home/$USER
# RUN adduser --disabled-password \
#     --gecos "Non-root user" \
#     --uid $UID \
#     --gid $GID \
#     --home $HOME \
#     $USER

##--------------------------------------------------------------------------------
##--- Configuration
# ----- ssh
RUN mkdir -p /var/run/sshd $HOME/.ssh
RUN sed -ri 's#session  required  pam_loginuid.so#session   required    pam_loginuid.so#g' /etc/pam.d/sshd
# ----- oh my zsh
RUN sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

##--------------------------------------------------------------------------------
##--- Install pip packages
WORKDIR $HOME

##--------------------------------------------------------------------------------
##--- OpenCV
# WORKDIR /home
# opencv
# ADD opencv_3.4.4.sh /home
# RUN chmod 755 /home/opencv_3.4.4.sh
# RUN sh /home/opencv_3.4.4.sh

##--- VSCode server
# RUN curl -fsSL https://code-server.dev/install.sh | sh -s -- --dry-run
# RUN curl -fsSL https://code-server.dev/install.sh | sh
# RUN systemctl enable --now code-server@root

##--------------------------------------------------------------------------------
##--- Copying local configuration files
COPY ./configurations/ $HOME

##--- Ignore output warnings
RUN export NO_AT_BRIDGE=1

##--------------------------------------------------------------------------------
# EXPOSE 6006
# EXPOSE 8080

WORKDIR $PROJECT_DIR