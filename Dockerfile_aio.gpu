ARG UBUNTU_VERSION=18.04
ARG CUDA_VERSION=10.2
FROM nvidia/cuda:${CUDA_VERSION}-cudnn7-devel-ubuntu${UBUNTU_VERSION}

ENV DEBIAN_FRONTEND=noninteractive

# ------------------------------------------------------------------------------------------
# Repository
RUN apt-get update --fix-missing && apt-get install -y apt-utils software-properties-common
RUN add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main"

# ------------------------------------------------------------------------------------------
RUN apt-get install -y \
        wget git zsh vim curl \
    # essentials for opencv
        build-essential cmake unzip pkg-config \
        libjpeg-dev libpng-dev libtiff-dev \
        libjasper1 libjasper-dev \
        libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
        libxvidcore-dev libx264-dev \
        libgtk-3-dev \
        libatlas-base-dev gfortran \
        python3.6-dev python3-pip \
        ca-certificates \
       # language-pack-en-base \
        openssh-server \
        libcanberra-gtk-module libcanberra-gtk3-module && \
    rm -rf /var/lib/apt/lists/*

RUN wget https://bootstrap.pypa.io/get-pip.py && python3 get-pip.py
ARG PIP=pip3
RUN ${PIP} install numpy

# ------------------------------------------------------------------------------------------
# Configuration
# ----- ssh
RUN mkdir -p /var/run/sshd /root/.ssh
RUN sed -ri 's#session  required  pam_loginuid.so#session   required    pam_loginuid.so#g' /etc/pam.d/sshd
# ----- oh my zsh
RUN sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

# ------------------------------------------------------------------------------------------
# WORKDIR /home
# opencv
# ADD opencv_3.4.4.sh /home
# RUN chmod 755 /home/opencv_3.4.4.sh
# RUN sh /home/opencv_3.4.4.sh

# other pip packages
# RUN ${PIP} install tensorboard matplotlib sklearn tensorboardX
# RUN ${PIP} install torch torchvision torchnet
# RUN ${PIP} install pillow tqdm

# --------------------------------------------------------------------------------------------
# ignore output warnings
RUN export NO_AT_BRIDGE=1

# VSCode server
# RUN curl -fsSL https://code-server.dev/install.sh | sh -s -- --dry-run
# RUN curl -fsSL https://code-server.dev/install.sh | sh
# RUN systemctl enable --now code-server@root


# --------------------------------------------------------------------------------------------
EXPOSE 6006
EXPOSE 8080

WORKDIR /root/code