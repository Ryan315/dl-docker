ARG UBUNTU_VERSION=ubuntu20.04
ARG CUDA_VERSION=11.1
# FROM nvidia/cuda:${CUDA_VERSION}-cudnn7-devel-ubuntu${UBUNTU_VERSION}
FROM nvidia/cudagl:${CUDA_VERSION}-devel-${UBUNTU_VERSION}

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update
RUN apt-get upgrade -y

RUN apt-get update && apt-get install -y --fix-missing \
        apt-utils \
        openssh-server \
        python3-dev python3-pip python3-testresources \
        wget git zsh vim curl \
        # # ---------------package for building opencv-----------
        # basic
        build-essential cmake pkg-config unzip yasm git checkinstall ffmpeg\
        # Image I/O libs
        libjpeg-dev libpng-dev libtiff-dev \
        # video/audio libs
        libavcodec-dev libavformat-dev libswscale-dev libavresample-dev \
        libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
        libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev \
        libfaac-dev libmp3lame-dev libvorbis-dev \
        # GTK lib
        libgtk-3-dev \
        # # parallelism library C++ for CPU
        libtbb-dev \
        python3-pyqt5 \
        # # optimization libraries for opencv
        libatlas-base-dev gfortran \
        locales \
        # ---------------------------------------------------
    && rm -rf /var/lib/apt/lists/*

ARG PIP=pip3
RUN ${PIP} install --upgrade pip
# RUN ${PIP} install numpy pillow torch torchvision

RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
    dpkg-reconfigure --frontend=noninteractive locales && \
    update-locale LANG=en_US.UTF-8

ENV LANG en_US.UTF-8

# Create a non-root user
ARG username=ryan90
ARG uid=1000
ARG gid=100
ENV USER $username
ENV UID $uid
ENV GID $gid
ENV HOME /home/$USER
RUN adduser --disabled-password \
    --gecos "Non-root user" \
    --uid $UID \
    --gid $GID \
    --home $HOME \
    $USER

# COPY environment.yml requirements.txt /tmp/
# RUN chown $UID:$GID /tmp/environment.yml /tmp/requirements.txt
# COPY postBuild /usr/local/bin/postBuild.sh
# RUN chown $UID:$GID /usr/local/bin/postBuild.sh && \
#     chmod u+x /usr/local/bin/postBuild.sh
# COPY docker/entrypoint.sh /usr/local/bin/
# RUN chown $UID:$GID /usr/local/bin/entrypoint.sh && \
#     chmod u+x /usr/local/bin/entrypoint.sh

# WORKDIR /home
# ADD opencv_4.5.sh /home
# RUN chmod 755 /home/opencv_4.5.sh
# RUN sh /home/opencv_4.5.sh

#create working directory
# ENV PROJECT_DIR $HOME/project
# RUN mkdir $PROJECT_DIR
ENV PROJECT_DIR $HOME/code
WORKDIR $PROJECT_DIR

# # build the conda environment
# ENV ENV_PREFIX $PWD/env
# RUN conda update --name base --channel defaults conda && \
#     conda env create --prefix $ENV_PREFIX --file /tmp/environment.yml --force && \
#     conda clean --all --yes
# # run the postBuild script to install any JupyterLab extensions
# RUN conda activate $ENV_PREFIX && \
#     /usr/local/bin/postBuild.sh && \
#     conda deactivate

# ------------------------------------------------------------------------------------------
# Configuration
# ----- ssh
RUN mkdir -p /var/run/sshd $HOME/.ssh
RUN sed -ri 's#session  required  pam_loginuid.so#session   required    pam_loginuid.so#g' /etc/pam.d/sshd
# ----- oh my zsh
RUN sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"


EXPOSE 6006
EXPOSE 8080
EXPOSE 5000

